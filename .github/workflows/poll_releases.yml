name: Poll branch releases
on:
  workflow_call:
    inputs:
      branch:
        description: 'App branch'
        type: string
        default: 'main'

    outputs:
      currentVersion:
        description: 'Current version'
        value: '${{ jobs.check-latest.outputs.current }}'
      updateRequired:
        description: 'New version found'
        value: ${{ jobs.check-latest.outputs.update }}
      upstreamVersion:
        description: 'Upstream version'
        value: '${{ jobs.check-latest.outputs.upstream }}'

jobs:
  check-latest:
    name: Check latest version
    runs-on: ubuntu-latest

    permissions:
      contents: write

    strategy:
      fail-fast: true
      matrix:
        arch: ["amd64"]
        include:
          - arch: amd64
            os: ubuntu-latest

    outputs:
      current: '${{ steps.current.outputs.version }}'
      update: ${{ steps.check_tag.outputs.exists == 'false' }}
      upstream: '${{ steps.upstream.outputs.version }}'

    steps:
    - name: Get upstream (pre)release
      id: upstream
      run: |
        TAG=$(curl -sL --request GET \
          --url "${{ github.api_url }}/repos/Sonarr/Sonarr/releases" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: token ${{ github.token }}" \
          | jq --argjson DEVELOP ${{ inputs.branch == 'develop' }} \
          -r 'map(select(.prerelease==$DEVELOP)) | first | .tag_name')

        echo "version=${TAG//v}" >> $GITHUB_OUTPUT
      env:
        DEVELOP: ${{ inputs.branch == 'develop' }}

    - name: Get current releases
      id: current
      run: |
        RELEASE=$(curl -sL --request GET \
          --url "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: token ${{ github.token }}")
        
        TAG=$(echo ${RELEASE} | jq -r 'first | .tag_name')
        RELEASE_TAG=$(echo ${RELEASE} | jq -r 'map(select(.prerelease==false)) | first | .tag_name')
        PRERELEASE_TAG=$(echo ${RELEASE} | jq -r 'map(select(.prerelease==true)) | first | .tag_name')

        echo "version=${TAG//v}" >> $GITHUB_OUTPUT
        echo "releaseVersion=${RELEASE_TAG//v}" >> $GITHUB_OUTPUT
        echo "prereleaseVersion=${PRERELEASE_TAG//v}" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      uses: mukunku/tag-exists-action@v1.6.0
      id: check_tag
      with:
        tag: 'v${{ steps.upstream.outputs.version }}'

    - uses: actions/checkout@v4
      if: steps.check_tag.outputs.exists == 'false'
  
    - name: Update Readme (prerelease)
      uses: jacobtomlinson/gha-find-replace@v3
      if: inputs.branch == 'develop'
      with:
        find: '${{ steps.current.outputs.prereleaseVersion }}'
        replace: '${{ steps.upstream.outputs.version }}'
        include: 'README.md'
        regex: false

    - name: Update Readme (release)
      uses: jacobtomlinson/gha-find-replace@v3
      if: inputs.branch != 'develop'
      with:
        find: '${{ steps.current.outputs.releaseVersion }}'
        replace: '${{ steps.upstream.outputs.version }}'
        include: 'README.md'
        regex: false

    - name: Push changes
      uses: EndBug/add-and-commit@v9
      if: steps.check_tag.outputs.exists == 'false'
      with:
        committer_name: GitHub Actions
        committer_email: actions@github.com
        message: 'docs: Bump ${{ inputs.branch }} image version to ${{ steps.upstream.outputs.version }}'
        tag: 'v${{ steps.upstream.outputs.version }}'