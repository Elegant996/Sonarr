name: Build release
on:
  workflow_call:
    inputs:
      branch:
        description: 'App branch'
        type: string
        default: 'main'
      upstreamVersion:
        description: 'Upstream version'
        type: string
        required: true

jobs:
  docker:
    name: Build upstream version
    runs-on: ubuntu-latest

    env:
      currentVersion: ${{ inputs.branch == 'main' && vars.RELEASE_VERSION || vars.PRERELEASE_VERSION }}

    permissions:
      contents: write
      packages: write

    strategy:
      fail-fast: true
      matrix:
        arch: ["amd64"]
        include:
          - arch: amd64
            os: ubuntu-latest

    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Sanitize repo slug
      uses: actions/github-script@v7
      id: repo_slug
      with:
        result-encoding: string
        script: return '${{ github.repository }}'.toLowerCase()
    
    - uses: actions/checkout@v4
      with:
        ref: 'v${{ inputs.upstreamVersion }}'

    - uses: dsaltares/fetch-gh-release-asset@master
      with:
        repo: 'Sonarr/Sonarr'
        version: 'tags/v${{ inputs.upstreamVersion }}'
        file: 'Sonarr.${{ inputs.branch }}.${{ inputs.upstreamVersion }}.linux-musl-x64.tar.gz'
        target: 'sonarr.tar.gz'
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      continue-on-error: true
      id: buildx1
      with:
        build-args: |
          VERSION=${{ inputs.upstreamVersion }}${{ inputs.branch == 'develop' && '-dev' }}
        context: .
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: |
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.upstreamVersion }}-${{ inputs.branch }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.upstreamVersion }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.branch }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:latest

    # Temp workaround for failed builds
    - name: Wait to retry
      if: steps.buildx1.outcome != 'success'
      run: |
        sleep 60

    # Temp workaround for failed builds
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      if: steps.buildx1.outcome != 'success'
      with:
        build-args: |
          VERSION=${{ inputs.upstreamVersion }}${{ inputs.branch == 'develop' && '-dev' }}
        context: .
        platforms: linux/${{ matrix.arch }}
        push: true
        tags: |
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.upstreamVersion }}-${{ inputs.branch }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.upstreamVersion }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:${{ inputs.branch }}
          ghcr.io/${{ steps.repo_slug.outputs.result }}:latest

    - name: Generate changelog
      id: changelog
      uses: metcalfc/changelog-generator@v4.3.1
      with:
        mytoken: ${{ github.token }}
        head-ref: 'v${{ inputs.upstreamVersion }}'
        base-ref: 'v${{ env.currentVersion }}'

    - name: Publish release
      uses: ncipollo/release-action@v1.14.0
      with:
        prerelease: ${{ inputs.branch != 'main' }}
        name: '${{ inputs.upstreamVersion }}'
        tag: 'v${{ inputs.upstreamVersion }}'
        body: |
          Changes in this Release: 
          ${{ steps.changelog.outputs.changelog }}

    - name: Update repository variables
      run: |
        if [[ ${{ inputs.branch == 'main' }} ]]; then
          gh variable set RELEASE_VERSION --body "${{ inputs.upstreamVersion }}"
        else
          gh variable set PRERELEASE_VERSION --body "${{ inputs.upstreamVersion }}"
        fi